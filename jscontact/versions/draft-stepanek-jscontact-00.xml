<?xml version="1.0" encoding="utf-8"?>
<!-- name="GENERATOR" content="github.com/mmarkdown/mmark Mmark Markdown Processor - mmark.nl" -->
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd' []>
<rfc ipr="trust200902" submissionType="IETF" category="std" xml:lang="en" consensus="yes" docName="draft-stepanek-jscontact-00">
<?rfc toc="yes"?><?rfc symrefs="yes"?><?rfc sortrefs="yes"?><?rfc compact="yes"?><?rfc subcompact="no"?><?rfc comments="no"?>
<front>
<title abbrev="JSContact">JSContact: A JSON representation of addressbook data</title><author initials="R." surname="Stepanek" fullname="Robert Stepanek"><organization>FastMail</organization><address><postal><street>PO Box 234, Collins St West</street>
<city>Melbourne</city>
<code>VIC 8007</code>
<country>Australia</country>
</postal><email>rsto@fastmailteam.com</email>
</address></author>
<date year="2019" month="February" day="28"></date>
<area>Applications</area><workgroup>TBD</workgroup><keyword>JSON</keyword>
<keyword>addressbook</keyword>
<keyword>contacts</keyword>
<keyword>VCARD</keyword>

<abstract><t>This specification defines a data model and JSON representation of contact information that can be used for data storage and exchange in address book or directory applications. It aims to be an alternative to the vCard data format and to be unambiguous, extendable and simple to process. In contrast to the JSON-based jCard format, it is not a direct mapping from the vCard data model and expands semantics where appropriate.</t>
</abstract>

</front>

<middle>

<section anchor="introduction" title="Introduction">
<t>This document defines a data model for contact data normally used in address book or directory applications and services. It aims to be an alternative to the vCard data format <xref target="RFC6350"></xref> and to provide a JSON-based standard representation of contacts data.</t>
<t>The key design considerations for this data model are as follows:</t>
<t>
<list style="symbols">
<t>Most of the initial set of attributes should be taken from the vCard data format <xref target="RFC6350"></xref>, but the specification should add new attributes or value types, or not support existing ones, where appropriate. Conversion between the data formats need not fully preserve semantic meaning.</t>
<t>The attributes of the contacts data represented must be described as a simple key-value pair, reducing complexity of its representation.</t>
<t>The data model should avoid all ambiguities and make it difficult to make mistakes during implementation.</t>
<t>Extensions, such as new properties and components, MUST NOT lead to requiring an update to this document.</t>
</list>
</t>
<t>The representation of this data model is defined in the I-JSON format <xref target="RFC7493"></xref>, which is a strict subset of the JavaScript Object Notation (JSON) Data Interchange Format <xref target="RFC8259"></xref>. Using JSON is mostly a pragmatic choice: its widespread use makes JSContact easier to adopt, and the availability of production-ready JSON implementations eliminates a whole category of parser-related interoperability issues.</t>

<section anchor="relation-to-the-xcard-and-jcard-formats" title="Relation to the xCard and jCard formats">
<t>The xCard <xref target="RFC6351"></xref> and jCard <xref target="RFC7095"></xref> specifications define alternative representations for vCard data, in XML and JSON format respectively. Both explicitly aim to not change the underlying data model. Accordingly, they are regarded as equal to vCard in the context of this document.</t>
</section>

<section anchor="terminology" title="Terminology">
<t>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;,
&quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;NOT RECOMMENDED&quot;, &quot;MAY&quot;, and &quot;OPTIONAL&quot; in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"></xref> <xref target="RFC8174"></xref> when, and only when,
they appear in all capitals, as shown here.</t>
</section>
</section>

<section anchor="contact" title="Contact">
<t>MIME type: <spanx style="verb">application/jscontact+json;type=jscontact</spanx></t>
<t>A <spanx style="strong">JSContact</spanx> object stores contact information about a person or company. It has the following properties:</t>
<t>
<list style="symbols">
<t><spanx style="strong">uid</spanx>: <spanx style="verb">String</spanx>
 A globally unique identifier, used to associate the object as the same across different systems, addressbooks and views.  The value of this property MUST be unique across <spanx style="emph">all</spanx> JSContact objects. <xref target="RFC4122"></xref> describes a range of established algorithms to generate universally unique identifiers (UUID), and the random or pseudo-random version is recommended.
 For compatibility with <xref target="RFC6350"></xref> UIDs, implementations MUST accept both URI and free-form text.
 A valid JSContact object MUST include this property.</t>
<t><spanx style="strong">prefix</spanx>: <spanx style="verb">String</spanx> (optional)
The honorific title of the contact, e.g. &quot;Mr&quot;, &quot;Ms&quot;, &quot;Dr&quot;, etc.</t>
<t><spanx style="strong">firstName</spanx>: <spanx style="verb">String</spanx> (optional)
The first name(s) of a contact.</t>
<t><spanx style="strong">lastName</spanx>: <spanx style="verb">String</spanx> (optional)
The last name of a contact.</t>
<t><spanx style="strong">suffix</spanx>: <spanx style="verb">String</spanx> (optional)
The honorific suffix of the contact, e.g. &quot;B.A.&quot;, &quot;Esq.&quot; etc.</t>
<t><spanx style="strong">nickname</spanx>: <spanx style="verb">String</spanx> (optional)
The nickname of the contact.</t>
<t><spanx style="strong">birthday</spanx>: <spanx style="verb">String</spanx> (optional)
The person's birth date in the form <spanx style="verb">&quot;YYYY-MM-DD&quot;</spanx> (any part may be all <spanx style="verb">0</spanx>s for unknown).</t>
<t><spanx style="strong">anniversary</spanx>: <spanx style="verb">String</spanx> (optional)
The person's anniversary date in the form <spanx style="verb">&quot;YYYY-MM-DD&quot;</spanx> (any part may be all <spanx style="verb">0</spanx>s for unknown).</t>
<t><spanx style="strong">company</spanx>: <spanx style="verb">String</spanx> (optional)
The company for which the person works.</t>
<t><spanx style="strong">department</spanx>: <spanx style="verb">String</spanx> (optional)
The department within the company for which the person works.</t>
<t><spanx style="strong">jobTitle</spanx>: <spanx style="verb">String</spanx> (optional)
The job title of the person.</t>
<t><spanx style="strong">emails</spanx>: <spanx style="verb">ContactInformation[]</spanx> (optional)
An array of ContactInformation objects where the values are email addresses. Types are:
<list style="symbols">
<t><spanx style="verb">&quot;personal&quot;</spanx> The address is for emailing the person in a personal context.</t>
<t><spanx style="verb">&quot;work&quot;</spanx> The address is for emailing the person in a professional context.</t>
<t><spanx style="verb">&quot;other&quot;</spanx> The address is for some other purpose. A <spanx style="emph">label</spanx> property MAY be included to display next to the address to help the user identify its purpose.</t>
</list></t>
<t><spanx style="strong">phones</spanx>: <spanx style="verb">ContactInformation[]</spanx> (optional)
An array of ContactInformation objects where the values are phone numbers. Types are:
<list style="symbols">
<t><spanx style="verb">&quot;home&quot;</spanx> The number is for contacting the person at their residence.</t>
<t><spanx style="verb">&quot;work&quot;</spanx> The number is for contacting the person at their workplace.</t>
<t><spanx style="verb">&quot;mobile&quot;</spanx> The number is for contacting the person regardless of location.</t>
<t><spanx style="verb">&quot;fax&quot;</spanx> The number is for sending faxes to the contact.</t>
<t><spanx style="verb">&quot;pager&quot;</spanx> The number is for a pager or beeper associated with the contact.</t>
<t><spanx style="verb">&quot;other&quot;</spanx> The number is for some other purpose. A <spanx style="emph">label</spanx> property MAY be included to display next to the number to help the user identify its purpose.</t>
</list></t>
<t><spanx style="strong">online</spanx>: <spanx style="verb">ContactInformation[]</spanx> (optional)
An array of ContactInformation objects where the values are URIs or usernames associated with the person for online services.
Types are:
<list style="symbols">
<t><spanx style="verb">&quot;uri&quot;</spanx> The value is a URI, e.g. a website link.</t>
<t><spanx style="verb">&quot;username&quot;</spanx> The value is a username associated with the person (e.g. for social media, or an IM client). A <spanx style="emph">label</spanx> property SHOULD be included to identify what service this is for. For compatibility between clients, this label SHOULD be the canonical service name, including capitalisation. e.g. <spanx style="verb">&quot;Twitter&quot;</spanx>, <spanx style="verb">&quot;Facebook&quot;</spanx>, <spanx style="verb">&quot;Skype&quot;</spanx>, <spanx style="verb">&quot;GitHub&quot;</spanx>, <spanx style="verb">&quot;XMPP&quot;</spanx>.</t>
<t><spanx style="verb">&quot;other&quot;</spanx> The value is something else not covered by the above categories. A <spanx style="emph">label</spanx> property MAY be included to display next to the number to help the user identify its purpose.</t>
</list></t>
<t><spanx style="strong">addresses</spanx>: <spanx style="verb">Address[]</spanx> (optional)
An array of Address objects, containing physical locations associated with the person.
Types are:
<list style="symbols">
<t><spanx style="verb">&quot;home&quot;</spanx> An address of a residence associated with the person.</t>
<t><spanx style="verb">&quot;work&quot;</spanx> An address of a workplace associated with the person.</t>
<t><spanx style="verb">&quot;billing&quot;</spanx> An address to be used with billing associated with the person.</t>
<t><spanx style="verb">&quot;postal&quot;</spanx> An address to be used for delivering physical items to the person.</t>
<t><spanx style="verb">&quot;other&quot;</spanx> An address not covered by the above categories.</t>
</list></t>
<t><spanx style="strong">notes</spanx>: <spanx style="verb">String</spanx> (optional)
Arbitrary notes about the contact.</t>
</list>
</t>
<t>A <spanx style="strong">ContactInformation</spanx> object has the following properties:</t>
<t>
<list style="symbols">
<t><spanx style="strong">type</spanx>: <spanx style="verb">String</spanx>
Specifies the context of the contact information. This MUST be taken from the set of values allowed depending on whether this is part of the <spanx style="emph">phones</spanx>, <spanx style="emph">emails</spanx> or <spanx style="emph">online</spanx> property (see above).</t>
<t><spanx style="strong">label</spanx>: <spanx style="verb">String</spanx> (optional)
A label describing the value in more detail, especially if <spanx style="verb">type === &quot;other&quot;</spanx> (but MAY be included with any type).</t>
<t><spanx style="strong">value</spanx>: <spanx style="verb">String</spanx>
The actual contact information, e.g. the email address or phone number.</t>
<t><spanx style="strong">isDefault</spanx>: <spanx style="verb">Boolean</spanx> (optional, default: <spanx style="verb">false</spanx>)
Whether this <spanx style="emph">ContactInformation</spanx> is the default for its type. This SHOULD only be one per type.</t>
</list>
</t>
<t>An <spanx style="strong">Address</spanx> object has the following properties:</t>
<t>
<list style="symbols">
<t><spanx style="strong">type</spanx>: <spanx style="verb">String</spanx>
Specifies the context of the address information. This MUST be taken from the set of values allowed (see above).</t>
<t><spanx style="strong">label</spanx>: <spanx style="verb">String</spanx> (optional)
A label describing the value in more detail, especially if <spanx style="verb">type === &quot;other&quot;</spanx> (but MAY be included with any type).</t>
<t><spanx style="strong">street</spanx>: <spanx style="verb">String</spanx> (optional)
The street address. This MAY be multiple lines; newlines MUST be preserved.</t>
<t><spanx style="strong">locality</spanx>: <spanx style="verb">String</spanx> (optional)
The city, town, village, post town, or other locality within which the street address may be found.</t>
<t><spanx style="strong">region</spanx>: <spanx style="verb">String</spanx> (optional)
The province, such as a state, county, or canton within which the locality may be found.</t>
<t><spanx style="strong">postcode</spanx>: <spanx style="verb">String</spanx> (optional)
The postal code, post code, ZIP code or other short code associated with the address by the relevant country's postal system.</t>
<t><spanx style="strong">country</spanx>: <spanx style="verb">String</spanx> (optional)
The country name.</t>
<t><spanx style="strong">isDefault</spanx>: <spanx style="verb">Boolean</spanx> (optional, default: <spanx style="verb">false</spanx>)
Whether this <spanx style="emph">Address</spanx> is the default for its type. This SHOULD only be one per type.</t>
</list>
</t>
<t>A <spanx style="strong">File</spanx> Object has the following properties:</t>
<t>
<list style="symbols">
<t><spanx style="strong">href</spanx>: <spanx style="verb">String</spanx>  A URI from which the resource may be fetched.  This MAY be a &quot;data:&quot; URL, but it is recommended that the file be hosted on a server to avoid embedding arbitrarily large data in JSContact object instances.</t>
<t><spanx style="strong">type</spanx>: <spanx style="verb">String</spanx> (optional)
The content-type of the file, if known.</t>
<t><spanx style="strong">name</spanx>: <spanx style="verb">String</spanx> (optional)
The full file name, if known. e.g. &quot;myface.png&quot;</t>
<t><spanx style="strong">size</spanx>: <spanx style="verb">Number</spanx> (optional)
The positive integer size, in octets, of the file when fully decoded (i.e. the number of octets in the file the user would download), if known.</t>
</list>
</t>
</section>

<section anchor="contact-group" title="Contact Group">
<t>MIME type: <spanx style="verb">application/jscontact+json;type=jscontactgroup</spanx></t>
<t>A <spanx style="strong">JSContactGroup</spanx> object represents a named set of contacts. It has the following properties:</t>
<t>
<list style="symbols">
<t><spanx style="strong">uid</spanx>: String
A globally unique identifier. The same requirements as for the JSContact <spanx style="strong">uid</spanx> property apply.
A valid JSContactGroup object MUST include this property.</t>
<t><spanx style="strong">name</spanx>: <spanx style="verb">String</spanx> (optional)
The user-visible name for the group, e.g. &quot;Friends&quot;. This may be any UTF-8 string of at least 1 character in length and maximum 255 octets in size. The same name may be used by two different groups.</t>
<t><spanx style="strong">contactIds</spanx>: <spanx style="verb">String[]</spanx>
The ids of the contacts in the group. Implementations MUST preserve the order of list entries.</t>
</list>
</t>
</section>

<section anchor="iana-considerations" title="IANA Considerations">
<t>TBD</t>
</section>

<section anchor="security-considerations" title="Security Considerations">
<t>TBD</t>
</section>

</middle>

<back>
<references title="Normative References">
<?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7493.xml"?>
<?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8259.xml"?>
<?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6351.xml"?>
<?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7095.xml"?>
<?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"?>
<?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"?>
<?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4122.xml"?>
<?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6350.xml"?>
</references>

</back>

</rfc>
