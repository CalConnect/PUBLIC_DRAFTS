# Introduction

The iCalendar data format [@!RFC5545], a widely deployed interchange format for calendaring and scheduling data, has served calendaring vendors for a long while, but contains some ambiguities in its data model that cannot be overcome without backwards incompatible changes.

This document defines a JSON-based format describing an event, or recurring series of events, using a new data model that aims to be unambigous, extendable and simple to process.

The key design considerations for this format are as follows:

* The attributes of the event represented must be described as a simple key-value pair, reducing complexity of the event representation.
* The data format should avoid all ambiguities, making it difficult to make mistakes during implementation and increasing interoperability.
* The initial set of attributes should be taken from the iCalendar data format, but a conversion between the data formats is not guaranteed to be completed without losing semantic meaning.
* Extensions, such as new properties and components, must not lead to requiring an update to this document.

Best practices for conversion between iCalendar and JSEvent can be found in [TODO]().

## Notational Conventions

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [@!RFC2119].

The underlying format used for this specification is JSON. Consequently, the terms "object" and "array" as well as the four primitive types (strings, numbers, booleans, and null) are to be interpreted as described in Section 1 of [@!RFC7159].

Some examples in this document contain "partial" JSON documents used for illustrative purposes.  In these examples, three periods "..." are used to indicate a portion of the document that has been removed for compactness.

## Data Types

In addition to the standard JSON data types, the following data types are used in this specification:

### UTCDate

This is a string in [@!RFC3339] `date-time` format, with the further restrictions that any letters MUST be in upper-case, the time component MUST be included and the time MUST be in UTC. Fractional second values MUST NOT be included unless non-zero (so, for example `2010-10-10T10:10:10.003Z` is OK, but `2010-10-10T10:10:10.000Z` is invalid and MUST be encoded as `2010-10-10T10:10:10Z`).

In common notation, it should be of the form `YYYY-MM-DDTHH:MM:SSZ`.

### LocalDate

This is a date-time string with **no time zone/offset information attached**. It is otherwise in the same format as UTCDate: `YYYY-MM-DDTHH:MM:SS`. The time zone to associate with this comes from an associated property.

### Duration

A duration is represented by a subset of ISO8601 duration format, as specified by the following ABNF:

    dur-secfrac       = "." 1*DIGIT
    dur-second        = 1*DIGIT [dur-secfrac] "S"
    dur-minute        = 1*DIGIT "M" [dur-second]
    dur-hour          = 1*DIGIT "H" [dur-minute]
    dur-time          = "T" (dur-hour / dur-minute / dur-second)
    dur-day           = 1*DIGIT "D"

    duration          = "P" (dur-day [dur-time] / dur-time)

In addition, the duration MUST NOT include fractional second values unless the fraction is non-zero.

## Type signatures

Types signatures are given for all properties in this document. The following conventions are used:

* `Boolean|String` – The value is either a JSON `Boolean` value, or a JSON `String` value.
* `Foo` – Any name that is not a native JSON type means an object for which the properties (and their types) are defined elsewhere within this document.
* `Foo[]` – An array of objects of type `Foo`.
* `String[Foo]` – A JSON `Object` being used as a map (associative array), where all the values are of type `Foo`.

# Structure of a JSEvent object

A JSEvent object is a JSON object, which MUST be valid I-JSON, as specified in [@!RFC7159]. Property names and values are case-sensitive. The I-JSON format adds restrictions to avoid potentially confusing scenarios (for example, it mandates that an object MUST NOT have two properties with the same key).

The object has a collection of properties, as specified in the following sections. A valid JSEvent object MUST include **uid**, **updated** and **start** properties. All other properties are optional; omitted properties MUST be treated identically to if that property had the value of `null`, unless otherwise specified.

Vendors MAY add additional properties to the event object to support their custom features. The names of these properties SHOULD be prefixed with a domain name controlled by the vendor to avoid conflict, e.g. `fastmail.com/customprop`. Other systems that interact with events with properties they do not recognise SHOULD try to preserve them, but MUST otherwise ignore them.

# Metadata properties

## uid

Type: `String`

A globally unique identifier, used to associate the event as the same across different systems, calendars and views. The generator of the identifier MUST guarantee that the identifier is unique.

This property is an important part of scheduling, used to match requests with later replies, modifications, or deletion. All JSEvent objects MUST have a uid property.

Implementations MUST be able to receive and persist values of at least 255 octets for this property. They MUST NOT truncate values in the middle of a UTF-8 multi-octet sequence.

Corresponds to the UID property in iCalendar.

## relatedTo

Type: `String[Relation]|null`

References to other related events. This is represented as a map of the UID of the related event to an object with information about the relation.

A **Relation** object has the following properties:

- **relation**: `String[]`
  How the linked event is related to this event. The strings in the array MUST each be either one of the following values, registered in a future RFC, or a vendor-specific value.

  - `first`: The linked event is the first in the series this event is part of.
  - `next`: The linked event is the next in the series this event is part of.
  - `child`: The linked event is a subpart of this event.
  - `parent`: This event is part of the overall linked event.

If an event is split to make a "this and future" change to a recurrence, the original event should be truncated to end at the previous occurrence before this split, and a new event created to represent all the events after the split.

A `relation=["next"]` *relatedTo* property SHOULD be set on the original event with the UID of the new event. A `relation=["nfirstext"]` *relatedTo* property with the UID of the first event in the series SHOULD be set on the new event. Clients can then follow these UIDs to get the complete set of events if the user wishes to modify them all at once.

Corresponds to the RELATED-TO property in iCalendar.

## prodId

Type: `String|null`

The identifier for the product that created the JSEvent object. The vendor of the implementation SHOULD ensure that this is a globally unique identifier, using some technique such as an FPI value, as defined in [ISO.9070.1991].

This property SHOULD NOT be used to alter the interpretation of an JSEvent object beyond the semantics specified in this memo.  For example, it is not to be used to further the understanding of non-standard properties.

Corresponds to the PRODID property in iCalendar.

## created

Type: `UTCDate|null`

The date and time this event was initially created.

Corresponds to the CREATED property in iCalendar.

## updated

Type: `UTCDate`

The date and time the data in this event was last modified.

Corresponds to the DTSTAMP and LAST-MODIFIED properties in iCalendar. (These are only different in the iTIP case, and the difference is not actually useful.)

## sequence

Type: `Number` (Defaults to `0` if omitted)

Initially zero, this is monotonically incremented each time a significant change is made to the event.

Corresponds to the SEQUENCE property in iCalendar.

## method

Type: `String|null`

The iTIP method, in lower-case. Used for scheduling.

Corresponds to the METHOD property in iCalendar.

# What and where properties

## title

Type: `String` (Defaults to `''` (the empty string) if omitted)

A short summary of the event.

Corresponds to the SUMMARY property in iCalendar.

## description

Type: `String` (Defaults to `''` (the empty string) if omitted)

A longer form description of the event. This is plain text, but a client SHOULD attempt to hyperlink URLs when displaying it.

Corresponds to the DESCRIPTION property in iCalendar.

## locations

Type: `String[Location]|null`

A map of of location id to Location objects, representing locations associated with the event. A location id may be any string and need only be unique to this event, although a UUID is a practical choice.

A **Location** object has the following properties. All properties are optional, but every Location object MUST have at least one property:

- **name**: `String`
  The human-readable name of the location.

- **description**: `String`
  Human-readable instructions for accessing this location. This may be an address, set of directions, door access code, etc.

- **rel**: `String`
  The relation type of this location to the event. This MUST be either one of the following values, registered in a future RFC, or a vendor-specific value. Vendor specific values MUST be prefixed with a domain name controlled by the vendor, e.g. `fastmail.com/customrel`. Any value the client or server doesn't understand should be treated the same as `unknown`.

    - `start`: The event starts at this location.
    - `end`: The event ends at this location.
    - `virtual`: This is not a physical location (e.g. this location is an online chat room where people will meet.)
    - `unknown`: The relation of this location to the event is unknown.

- **timeZone**: `String` (IANA TZ name)
  A time zone for this location. If omitted, the event time zone MUST be used for this location.

- **coordinates**: `String`
  An [@!RFC5870] `geo:` URI for the location.

- **uri**: `String`
  A URI that represents how to connect to the event from this location. This may be a telephone number (represented as `tel:+1-555-555-555`) for a teleconference, a web address for online chat, or a custom URI for something like Skype (e.g. `skype:username`).

- **linkIds**: `String[]|null` (optional, defaults to `null`)
  Links to alternate representations of this location, for example in vCard format. If a given value does not correspond to any link id in the *links*
  property of the instance, this MUST be ignored.

Corresponds to the LOCATION property in iCalendar, however this representation is much richer than is supported by iCalendar. When converting from iCalendar, the LOCATION property should become a single location with just a *description* property. If the event has a different end time zone to start time zone, this should be added as a second location with just a *timeZone* property.

## links

Type: `String[Link]|null`

A map of of link id to Link objects, representing external resources associated with the event. A link id may be any string and need only be unique to this event, although the href or a UUID are practical choices.

Corresponds to the ATTACH property in iCalendar.

A **Link** object has the following properties:

- **href**: `String`

    A URI from which the resource may be fetched. This MAY be a `data:` URL, but it is recommended that the file be hosted on a server.

- **type**: `String|null` (optional, defaults to `null`)

    The content-type of the resource, if known.

- **size**: `Number|null` (optional, defaults to `null`)

    The size, in bytes, of the resource when fully decoded (i.e. the number of bytes in the file the user would download), if known.

- **rel**: `String` (optional, defaults to `related`)

    The value of the "rel" member is a string that is a [registered relation type](http://www.iana.org/assignments/link-relations/link-relations.xhtml) (see [@!RFC5988]). The value identifies the relation of the linked resource to the event.

    Links with a *rel* of `enclosure` SHOULD be considered by the client as attachments for download.

    Links with a *rel* of `describedby` SHOULD be considered by the client to be an alternate representation of the *description*, for example an HTML page describing the event.

    Links with a *rel* of `icon` SHOULD be considered by the client to be an image that it MAY use when presenting the calendar data to a user. This corresponds to the IMAGE iCalendar property as specified in [@!RFC7986]. The *properties* object of this link MAY include a *display* property indicating the intended purpose of this image. If included, the value MUST be either one of the following values, registered in a future RFC, or a vendor-specific value. Vendor specific values MUST be prefixed with a domain name controlled by the vendor.

    - `"badge"`: an image inline with the title of the event
    - `"graphic"`: a full image replacement for the event itself
    - `"fullsize"`: an image that is used to enhance the event
    - `"thumbnail"`: a smaller variant of "FULLSIZE" to be used when space for
      the image is constrained

- **title**: `String|null` (optional, defaults to `null`)

    A human-readable description of the resource.

- **properties**: `String[String|null]|null` (optional, defaults to `null`)
    Extra metadata stored by a client about a link. The keys are as defined in this document, as defined in a future RFC, or URIs that should be owned by the client author to avoid conflicts. The values MUST be strings or `null`.

## locale

Type: `String|null`

The [@!RFC5646] language tag that best describes the locale used for the event, if known.

Corresponds to the LANGUAGE parameter in iCalendar, which is added to individual properties. When converting from iCalendar, one language must be picked as the main *locale* for the event, and all properties in other languages moved to the *localizations* JSEvent property.

## localizations

Type: `String[PatchObject]|null`

A map of [@!RFC5646] language tag to a patch object which localises the event into that locale.

See the description of *recurrenceOverrides* for the structure of the PatchObject. The patches are applied to the top-level object. In **addition** to all the restrictions on patches specified there, the pointer also MUST NOT start with one of the following prefixes; any patch with a such a key MUST be ignored:

- `sequence`
- `localization`
- `start`
- `timeZone`
- `duration`
- `status`
- `showAsFree`
- `participants`
- `useDefaultAlerts`

Corresponds to the LANGUAGE parameter in iCalendar, which is added to individual properties. When converting from iCalendar, one language must be picked as the main *locale* for the event, and all properties in other languages moved to the *localizations* JSEvent property.

## keywords

Type: `String[]|null`

A list keywords or tags related to the event. The values are freeform and do not have to follow any particular structure.

Corresponds to the CATEGORIES property in iCalendar.

## color

Type: `String`

Specifies a color clients MAY use when displaying this event. The value is a case-insensitive color name taken from the CSS3 set of names, defined in Section 4.3 of [W3C.REC-css3-color-20110607](https://www.w3.org/TR/2011/REC-css3-color-20110607). It is not intended that clients necessarily use the exact RGB value associated with this color name, but rather that they use the name to find a suitable color that works in the given UA context.

Corresponds to the COLOR property in iCalendar, as specified in [@!RFC7986].

# Time, duration and recurrence properties

## isAllDay

Type: `Boolean` (optional, defaults to `false`)

Is the event an all day event, such as a birthday or public holiday?

Corresponds to the type (DATE or DATE-TIME) of the DTSTART property in iCalendar.

## start

Type: `LocalDate` e.g. `2015-09-02T00:00:00`

The date/time the event would start in the event's time zone.

Corresponds to the DTSTART property in iCalendar. Note that time zone information is stored separately in JSEvent.

## timeZone

Type: `String|null`

The [IANA Time Zone Database](http://www.iana.org/time-zones) name for the time zone the event is scheduled in, or `null` for floating time. If omitted, this MUST be presumed to be `null` (i.e. floating time).

Corresponds to the TZID part of the DTSTART property in iCalendar.

## duration

Type: `Duration`, e.g. `P2DT3H` (Defaults to `P0D` if omitted)

The duration of the event in absolute time (i.e. in UTC time; ignoring DST shifts). To get the end date in the event time zone, convert start into UTC, then apply the duration, then convert the result into the appropriate time zone.

If *isAllDay* is `true`, then the following restrictions apply:

* the *start* property MUST have a time component of `T00:00:00`.
* the *timeZone* property MUST be `null` (or omitted).
* the *duration* MUST only include a day component.

Corresponds to the DURATION or DSTART+DTEND properties in iCalendar.

## recurrenceRule

Type: `Recurrence|null`

Defines a recurrence rule (repeating pattern) for recurring events.

Corresponds to the RRULE property in iCalendar.

A **Recurrence** object is a JSON object mapping of a RECUR value type in iCalendar. A Recurrence object has the following properties:

- **frequency**: `String`
  This MUST be one of the following values:
  - `"yearly"`
  - `"monthly"`
  - `"weekly"`
  - `"daily"`
  - `"hourly"`
  - `"minutely"`
  - `"secondly"`
  To convert from iCal, simply lower-case the FREQ part.

- **interval**: `Number` (optional, defaults to `1`)
  The INTERVAL part from iCal. If included, it MUST be an integer `x >= 1`.

- **rscale**: `String` (optional, defaults to `"gregorian"`)
  The RSCALE part from iCal RSCALE ([@!RFC7529]), converted to lower-case.

- **skip**: `String` (optional, defaults to `"omit"`)
  The SKIP part from iCal RSCALE ([@!RFC7529]), converted to lower-case.

- **firstDayOfWeek**: `String` (optional, defaults to `"monday"`)
  The WKST part from iCal, represented as a lower-case two-letter English day of the week. If included, it MUST be one of the following values: `"mo"|"tu"|"we"|"th"|"fr"|"sa"|"su"`

- **byDay**: `NDay[]` (optional)
  The BYDAY part from iCal. The array MUST have at least one entry if included.

    An **NDay** object has the following properties:

    - **day**: `String`
      The day-of-the-week part of the BYDAY value in iCal, lower-cased. MUST be one of the following values: `"mo"|"tu"|"we"|"th"|"fr"|"sa"|"su"`.
    - **nthOfPeriod**: `Number` (optional)
      If present, rather than representing *every* Friday (for example), it represents only a specific instance within the period (month for monthly recurrences, year for yearly recurrences). Must be a non-zero integer, negative integers means nth-last of period. This is the `"+1"` or `"-3"` etc. prefix from the BYDAY values in iCal.

- **byDate**: `Number[]` (optional)
  The BYMONTHDAY part from iCal. The array MUST have at least one entry if included.

- **byMonth**: `String[]` (optional)
  The BYMONTH part from iCal. Each entry is a string representation of a number, starting from "1" for the first month in the calendar (e.g. "1" means "January" with Gregorian calendar), with an optional "L" suffix for leap months (this MUST be upper-case, e.g. "3L"). The array MUST have at least one entry if included.

- **byYearDay**: `Number[]` (optional)
  The BYYEARDAY part from iCal. The array MUST have at least one entry if included.

- **byWeekNo**: `Number[]` (optional)
  The BYWEEKNO part from iCal. The array MUST have at least one entry if included.

- **byHour**: `Number[]` (optional)
  The BYHOUR part from iCal. The array MUST have at least one entry if included.

- **byMinute**: `Number[]` (optional)
  The BYMINUTE part from iCal. The array MUST have at least one entry if included.

- **bySecond**: `Number[]` (optional)
  The BYSECOND part from iCal. The array MUST have at least one entry if included.

- **bySetPosition**: `Number[]` (optional)
  The BYSETPOS part from iCal. The array MUST have at least one entry if included.
- **count**: `Number` (optional)
  The COUNT part from iCal. This MUST NOT be included if an *until* property is specified.

- **until**: `LocalDate` (optional)
  The UNTIL part from iCal. This MUST NOT be included if a *count* property is specified. Note, as in iCal, this date is presumed to be in the timezone specified in *timeZone*. It is not a UTC time.

## recurrenceOverrides

Type: `LocalDate[PatchObject|null]|null`

The object is a map of the Recurrence-Id (i.e. the date-time of the start of the occurrence) to either `null`, to indicate the occurrence should be deleted, or an object of patches to apply to the generated Event occurrence object.

If the Recurrence-Id does not match an expanded start date from a recurrence rule, it is to be treated as an additional occurrence (like an RDATE from iCalendar). The patch object may often be empty in this case.

By default, an occurrence inherits all properties from the main event except the *start* date-time, which is shifted to the new start time. However, individual properties of the occurrence can be modified by a patch, or multiple patches.

A **PatchObject** is of type `String[*|null]`, and represents an unordered set of patches to apply to the generated occurrence Event object.

The keys are a path in a subset of [@!RFC6901] JSON pointer format, with an implicit leading `/` (i.e. prefix each key with `/` before applying the JSON pointer evaluation algorithm).

A pointer MUST NOT start with one of the following prefixes; any patch with such a key MUST be ignored:

- `uid`
- `relatedTo`
- `prodId`
- `method`
- `isAllDay`
- `recurrenceRule`
- `recurrenceOverrides`
- `replyTo`

The pointer MUST NOT reference inside an array (i.e. you MUST NOT insert/delete from an array; the array MUST be replaced in its entirety instead). Any patch with a key that attempts to do this MUST be ignored.

When evaluating a path, all parts prior to the last (i.e. the value after the final slash) MUST exist for the patch to be valid. If not, the patch MUST be ignored.

There MUST NOT be two patches in the PatchObject where the pointer of one is the prefix of the pointer of the other, e.g. `alerts/1/offset` AND `alerts`. The result in this case is undefined.

The value associated with each pointer is either:

- `null`: Remove the property. If not present in the parent, this a no-op.
- Anything else: The value to replace the inherited property on the occurrence with (if present) or add to the occurrence (if not present).

Corresponds to the RDATE and EXDATE properties in iCalendar, plus VEVENT instances with a Recurrence-Id.

# Sharing and scheduling properties

## status

Type: `String` (Defaults to `confirmed` if omitted)

The status of the event. MUST be one of:

- `"confirmed"`: Indicates event is definite
- `"cancelled"`: Indicates event was cancelled.
- `"tentative"`: Indicates event is tentative.

Corresponds to the STATUS property in iCalendar (converted to lower-case).

## showAsFree

Type: `Boolean` (Defaults to `false` if omitted)

If true, the event should be ignored when calculating free/busy data for the user.

Corresponds to the TRANSP property in iCalendar.

## privacy

Type: `String` (Defaults to `public` if omitted)

Events are normally collected together to form a calendar. This calendar may be shared with other users, to enable them to better coordinate. This value allows the calendar owner to indicate that some events should not be shared, or should only have the time information shared but the details withheld.

As JSEvent is simply a data model, enforcement of the restrictions indicated by this property are up to the implementations.

This property MUST NOT affect the information sent to scheduled participants; it is only interpreted when the event is shared as part of a shared calendar.

The value MUST be either one of the following values, registered in a future RFC, or a vendor-specific value. Vendor specific values MUST be prefixed with a domain name controlled by the vendor, e.g. `fastmail.com/topsecret`. Any value the client or server doesn't understand should be preserved but treated as equivalent to `private`.

- `public`: The full details of the event are visible to those whom the event's calendar is shared with.
- `private`: The details of the event are hidden; only the basic time and
  metadata is shared. Implementations SHOULD ensure the following properties are
  stripped when the event is accessed by a sharee:

  - `title`
  - `description`
  - `locations`
  - `links`
  - `locale`
  - `localizations`
  - `participants`
  - `replyTo`

  In addition, any patches in `recurrenceOverrides` whose key is prefixed with one of the above properties SHOULD be stripped.

- `secret`: The event is hidden completely (as though it did not exist) when the calendar is shared.

Corresponds to the CLASS property in iCalendar.

## replyTo

Type: `String[String]|null`

Represents methods by which a participant may RSVP to the organizer of the event. The keys in the object are the available methods. The value is a uri to use that method. Future methods may be defined in future specications; a calendar client MUST just ignore any method it does not understand.

The following methods are defined:

- `imip`: The organizer accepts an iMIP ([@!RFC6047]) response. The value MUST be a `mailto:` uri. Corresponds to the email address of the ORGANIZER property in iCalendar.
- `web`: There is a web page where the user may submit an RSVP using their browser. The value MUST be an `http:` or `https:` uri. There is no standard representation of this in iCalendar.

## participants

Type: `String[Participant]|null`

A map of participant id to an object describing their participation in the event. A participant id may be any string and need only be unique to this event; the email address of the participant is a good choice.

Corresponds to the ORGANIZER and ATTENDEES properties from iCalendar.

A **Participant** object has the following properties. Properties are mandatory unless marked otherwise:

- **name**: `String`
  The display name of the participant (e.g. "Joe Bloggs").

    Corresponds to the CN parameter in iCalendar.

- **email**: `String`
  The email address for the participant.

- **kind**: `String` (optional, defaults to "unknown")
  What kind of entity this participant is. This MUST be either one of the following values, registered in a future RFC, or a vendor-specific value. Vendor specific values MUST be prefixed with a domain name controlled by the vendor, e.g. `fastmail.com/specialkind`. Any value the client or server doesn't understand should be treated the same as `unknown`.

    - `individual`: a single person
    - `group`: a collection of people invited as a whole
    - `resource`: a non-human resource, e.g. a projector
    - `location`: a physical location involved in the event that needs to be scheduled, e.g. a conference room.
    - `unknown`: no information is available about the kind of this participant.

  Corresponds to the CUTYPE parameter in iCalendar.

- **roles**: `String[]`
  A list of roles that this participant fulfils. At least one value MUST be specified for the participant. This MUST be either one of the following values, registered in a future RFC, or a vendor-specific value. Vendor specific values MUST be prefixed with a domain name controlled by the vendor, e.g. `fastmail.com/specialkind`. Any value the client or server doesn't understand should be preserved but ignored.

    - `owner`: The participant is an organizer of the event, and allowed to make alterations to any part of the event.
    - `attendee`: The participant is an attendee of the event.
    - `chair`: The participant is in charge of the event when it occurs.

- **locationId**: `String|null` (optional, defaults to `null`)
  The location at which this person is expected to be attending this event.
  If the value does not correspond to any location id in the *locations*
  property of the instance, this MUST be treated the same as if the
  participant's *locationId* were specified as `null`.

- **scheduleStatus**: `String` (optional, defaults to 'needs-action')
  The value MUST be either one of the following values, registered in a future RFC, or a vendor-specific value:

    - `needs-action`: No status yet set by the participant.
    - `accepted`: The participant will attend the event.
    - `declined`: The participant may attend the event.
    - `tentative`: The participant will not attend the event.

    Corresponds to the PARTSTAT parameter in iCalendar (converted to lower case).

- **schedulePriority**: `String` (optional, defaults to "required")
  The value MUST be either one of the following values, registered in a future RFC, or a vendor-specific value. Vendor specific values MUST be prefixed with a domain name controlled by the vendor, e.g. `fastmail.com/specialkind`. Any value the client or server doesn't understand should be treated the same as `required`.

    - `non-participant`: Indicates a participant who is copied for information purposes only.
    - `optional`: Indicates a participant whose participation is optional.
    - `required`: Indicates a participant whose participation is required.

    Corresponds to the ROLE parameter in iCalendar.

- **scheduleRSVP**: `Boolean` (optional, defaults to `false`)
  If `true`, the organizer is expecting the participant to notify them of their status.

    Corresponds to the RSVP parameter in iCalendar.

- **scheduleUpdated**: `UTCDate|null` (optional, defaults to `null`)
  The *updated* property of the last response from the user. This can be
  compared to the *updated* timestamp in future iMIP responses to determine
  if the response is older or newer than the current data.

    Corresponds to the DTSTAMP parameter in iCalendar.

- **memberOf**: `String[]` (optional)
  A list of group addresses that were invited to this event, which caused this participant to be invited due to their membership of the group(s). This MUST be omitted if none (rather than an empty array).

- **linkIds**: `String[]|null` (optional, defaults to `null`)
  Links to more information about this participant, for example in vCard format. If a given value does not correspond to any link id in the *links*
  property of the instance, this id MUST be ignored.

# Alerts properties

## useDefaultAlerts

Type: `Boolean` (Defaults to `false` if omitted)

If `true`, use the user's default alerts for this event and ignore the
*alerts* property. Fetching user defaults is dependent on the API from which
this object is being fetched, and is not defined in this specification.

## alerts

Type: `String[Alert]|null`

A map of of alert id to Alert objects, representing alerts/reminders to display or send the user for this event. An alert id may be any string and need only be unique to this event, although a UUID is a practical choice.

Corresponds to the VALARM component in iCalendar.

An **Alert** Object has the following properties:

- **relativeTo**: `String` (optional, defaults to `"before-start"`)
  This specifies where the offset is relative to for the alarm to trigger.
  The value MUST be one of:

    - `"before-start"`
    - `"after-start"`
    - `"before-end"`
    - `"after-end"`

- **offset**: `Duration`
  The offset from the start/end of the event to fire the alert. Note, if the event is in floating time (including all-day events), the server SHOULD use the user's default time zone when determining the start time.

- **action**: `DisplayAction|EmailAction|UnknownAction`
  How to alert the user. A *DisplayAction* means a message (which is service dependent, but SHOULD include the summary and start time of the event) SHOULD be shown to the user on any client connected to this account at the specified time. How this message is formatted (and any sound or other method of drawing the user's attention) is client specific. An *EmailAction* means the server MUST send an email as specified in the object at the specified time.

    Where a **DisplayAction** object has the following properties:

    - **type**: `String`
      The value MUST be `"display"`.
    - **acknowledged**: `UTCDate|null` (optional)
      When the user has permanently dismissed the alert the client SHOULD set this to the current time in UTC. Other clients which sync this property can then automatically dismiss or suppress duplicate alerts (alerts with the same alert id that triggered on or before this date-time). For a recurring event, the *acknowledged* property of the parent event SHOULD be updated, unless the alert is already overriden in *recurrenceOverrides*.
    - **snoozed**: `UTCDate|null` (optional)
      If the user temporarily dismisses the alert, this is the UTC date-time
      after which it should be reshown.

      Clients displaying this alert SHOULD hide it if the *snoozed* property is updated to a time in the future. When that time is reached, the alert SHOULD be reshown unless *acknowledged* is now after the **original** trigger time.

    Where an **EmailAction** object has the following properties:

    - **type**: `String`
      The value MUST be `"email"`.
    - **to**: `Emailer[]`
      An array of name/email objects to send the alert to. An **Emailer** object has the following properties:

      - **name**: `String`
        The name of the recipient. If not known, clients SHOULD use the empty string.
      - **email**: `String`
        The email address of the recipient.

    - **subject**: `String` (optional)
      The subject to use for the email. If omitted, this is implementation specific, but the server SHOULD try to choose an appropriate subject (such as "Event Summary: starting in 5 min").
    - **textBody**: `String` (optional)
      The plain-text body to use for the email. If omitted, the body of the email is implementation specific, but the server SHOULD include all pertinent details about the event, such as summary, location and start time.

    An **UnknownAction** object is an object that contains a `type` property whose value is not `"email"` or `"string"`, plus zero or more other properties. This is for compatibility with client extensions and future RFCs. The client or server SHOULD NOT trigger any type of alert for action types they do not understand, but MUST preserve them.
